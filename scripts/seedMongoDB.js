import fs from 'fs';
import path from 'path';
import mongoose from 'mongoose';
import dotenv from 'dotenv';
import Place from '../src/models/Place.js';

dotenv.config();

/**
 * Script ƒë·ªÉ seed d·ªØ li·ªáu t·ª´ vt_data_chuan.json v√†o MongoDB
 */
class MongoDBSeeder {
    constructor() {
        this.mongoUri = process.env.MONGODB_CONNECTIONSTRING;
        
        if (!this.mongoUri) {
            throw new Error('MONGODB_CONNECTIONSTRING is required in environment variables');
        }
    }

    /**
     * K·∫øt n·ªëi MongoDB
     */
    async connect() {
        try {
            await mongoose.connect(this.mongoUri);
            console.log('‚úÖ Connected to MongoDB successfully');
        } catch (error) {
            console.error('‚ùå MongoDB connection failed:', error.message);
            throw error;
        }
    }

    /**
     * Ng·∫Øt k·∫øt n·ªëi MongoDB
     */
    async disconnect() {
        try {
            await mongoose.disconnect();
            console.log('‚úÖ Disconnected from MongoDB');
        } catch (error) {
            console.error('‚ùå Error disconnecting from MongoDB:', error.message);
        }
    }

    /**
     * ƒê·ªçc d·ªØ li·ªáu t·ª´ file vt_data_chuan.json
     */
    loadData() {
        try {
            console.log('üìñ Loading data from vt_data_chuan.json...');
            
            const dataPath = path.join(process.cwd(), 'vt_data_chuan.json');
            const rawData = fs.readFileSync(dataPath, 'utf8');
            const data = JSON.parse(rawData);
            
            if (!data.features || !Array.isArray(data.features)) {
                throw new Error('Invalid data format: expected GeoJSON with features array');
            }
            
            console.log(`‚úÖ Loaded ${data.features.length} places from data file`);
            return data.features;
            
        } catch (error) {
            console.error('‚ùå Error loading data:', error.message);
            throw error;
        }
    }

    /**
     * Chuy·ªÉn ƒë·ªïi GeoJSON feature th√†nh Place document
     */
    transformToPlace(feature) {
        const props = feature.properties;
        const coords = feature.geometry?.coordinates;
        
        if (!coords || coords.length < 2) {
            throw new Error('Invalid coordinates in feature');
        }
        
        // T·∫°o place object theo schema
        const place = {
            name: props.name || 'Unnamed Place',
            address: props.address || '',
            description: props.description || '',
            tags: Array.isArray(props.tags) ? props.tags : [],
            location: {
                lng: coords[0], // longitude
                lat: coords[1]  // latitude
            }
        };
        
        // Th√™m category t·ª´ tags n·∫øu c√≥
        if (place.tags.length > 0) {
            const firstTag = place.tags[0].toLowerCase();
            const categoryMap = {
                'hotel': 'hotel',
                'resort': 'hotel',
                'restaurant': 'restaurant',
                'food': 'restaurant',
                'beach': 'nature',
                'park': 'nature',
                'mountain': 'nature',
                'temple': 'cultural',
                'museum': 'cultural',
                'market': 'shopping',
                'shopping': 'shopping',
                'entertainment': 'entertainment',
                'attraction': 'attraction',
                'historical': 'historical'
            };
            
            // T√¨m category ph√π h·ª£p
            for (const [key, category] of Object.entries(categoryMap)) {
                if (firstTag.includes(key)) {
                    place.category = category;
                    break;
                }
            }
        }
        
        // Set default category n·∫øu ch∆∞a c√≥
        if (!place.category) {
            place.category = 'attraction';
        }
        
        return place;
    }

    /**
     * X√≥a d·ªØ li·ªáu c≈© trong collection places
     */
    async clearExistingData() {
        try {
            console.log('üóëÔ∏è  Clearing existing places data...');
            const result = await Place.deleteMany({});
            console.log(`‚úÖ Deleted ${result.deletedCount} existing places`);
        } catch (error) {
            console.error('‚ùå Error clearing existing data:', error.message);
            throw error;
        }
    }

    /**
     * Seed d·ªØ li·ªáu v√†o MongoDB
     */
    async seedData(features) {
        try {
            console.log('üöÄ Starting MongoDB seeding process...');
            
            const places = [];
            let successCount = 0;
            let errorCount = 0;
            
            // Transform t·ª´ng feature th√†nh place
            for (let i = 0; i < features.length; i++) {
                try {
                    const feature = features[i];
                    const place = this.transformToPlace(feature);
                    places.push(place);
                    successCount++;
                    
                    console.log(`  ‚úÖ Processed: ${place.name}`);
                    
                } catch (error) {
                    console.error(`  ‚ùå Error processing feature ${i + 1}:`, error.message);
                    errorCount++;
                }
            }
            
            // Insert t·∫•t c·∫£ places v√†o MongoDB
            if (places.length > 0) {
                console.log(`\nüì§ Inserting ${places.length} places into MongoDB...`);
                
                const insertResult = await Place.insertMany(places, { 
                    ordered: false // Continue inserting even if some fail
                });
                
                console.log(`‚úÖ Successfully inserted ${insertResult.length} places`);
            }
            
            console.log('\nüìä Seeding Summary:');
            console.log(`‚úÖ Successfully processed: ${successCount} places`);
            console.log(`‚ùå Failed to process: ${errorCount} places`);
            console.log(`üìà Success rate: ${((successCount / features.length) * 100).toFixed(1)}%`);
            
        } catch (error) {
            console.error('‚ùå Error in seeding process:', error.message);
            throw error;
        }
    }

    /**
     * Verify d·ªØ li·ªáu sau khi seed
     */
    async verifyData() {
        try {
            console.log('\nüîç Verifying seeded data...');
            
            const totalCount = await Place.countDocuments();
            console.log(`üìä Total places in database: ${totalCount}`);
            
            if (totalCount > 0) {
                // L·∫•y sample places
                const samplePlaces = await Place.find().limit(3);
                console.log('\nüìç Sample places:');
                
                samplePlaces.forEach((place, idx) => {
                    console.log(`  ${idx + 1}. ${place.name}`);
                    console.log(`     Address: ${place.address}`);
                    console.log(`     Category: ${place.category}`);
                    console.log(`     Tags: ${place.tags.join(', ')}`);
                    console.log(`     Location: ${place.location.lat}, ${place.location.lng}`);
                    console.log('');
                });
                
                // Th·ªëng k√™ theo category
                const categoryStats = await Place.aggregate([
                    { $group: { _id: '$category', count: { $sum: 1 } } },
                    { $sort: { count: -1 } }
                ]);
                
                console.log('üìà Places by category:');
                categoryStats.forEach(stat => {
                    console.log(`  ${stat._id}: ${stat.count} places`);
                });
                
                // Test text search
                console.log('\nüîç Testing text search...');
                const searchResult = await Place.find(
                    { $text: { $search: 'beach hotel' } },
                    { score: { $meta: 'textScore' } }
                ).sort({ score: { $meta: 'textScore' } }).limit(3);
                
                console.log(`Found ${searchResult.length} places matching 'beach hotel':`);
                searchResult.forEach((place, idx) => {
                    console.log(`  ${idx + 1}. ${place.name} (score: ${place.score?.toFixed(2)})`);
                });
            }
            
        } catch (error) {
            console.error('‚ùå Error verifying data:', error.message);
        }
    }

    /**
     * Ch·∫°y to√†n b·ªô qu√° tr√¨nh seeding
     */
    async run() {
        try {
            console.log('üöÄ Starting MongoDB seeding process...\n');
            
            // 1. K·∫øt n·ªëi MongoDB
            await this.connect();
            
            // 2. Load d·ªØ li·ªáu
            const features = this.loadData();
            
            // 3. X√≥a d·ªØ li·ªáu c≈©
            await this.clearExistingData();
            
            // 4. Seed d·ªØ li·ªáu m·ªõi
            await this.seedData(features);
            
            // 5. Verify k·∫øt qu·∫£
            await this.verifyData();
            
            console.log('\nüéâ MongoDB seeding completed successfully!');
            
        } catch (error) {
            console.error('\nüí• Seeding failed:', error.message);
            process.exit(1);
        } finally {
            await this.disconnect();
        }
    }
}

// Ch·∫°y script n·∫øu ƒë∆∞·ª£c g·ªçi tr·ª±c ti·∫øp
if (import.meta.url === `file://${process.argv[1]}`) {
    const seeder = new MongoDBSeeder();
    seeder.run();
}

export default MongoDBSeeder;
