/**
 * =================================================================
 * API Test ƒë·ªÉ ki·ªÉm tra c√°c danh m·ª•c m·ªõi trong Explore
 * =================================================================
 */

import express from 'express';
import dotenv from 'dotenv';
dotenv.config();

const app = express();
app.use(express.json());

// Mock data for testing
const mockPlaces = [
  {
    id: '1',
    name: 'B·∫£o t√†ng L·ªãch s·ª≠ Vi·ªát Nam',
    category: 'b·∫£o t√†ng',
    address: '1 Tr√†ng Ti·ªÅn, Ho√†n Ki·∫øm, H√† N·ªôi',
    rating: { average: 4.5, count: 1250 },
    images: ['https://example.com/museum1.jpg'],
    source: 'places',
    isPartner: false
  },
  {
    id: '2',
    name: 'Ch√πa M·ªôt C·ªôt',
    category: 'ch√πa',
    address: 'Ch√πa M·ªôt C·ªôt, ƒê·ªôi C·∫•n, Ba ƒê√¨nh, H√† N·ªôi',
    rating: { average: 4.7, count: 2100 },
    images: ['https://example.com/chua1.jpg'],
    source: 'places',
    isPartner: false
  },
  {
    id: '3',
    name: 'V·ªãnh H·∫° Long',
    category: 'b√£i bi·ªÉn',
    address: 'V·ªãnh H·∫° Long, Qu·∫£ng Ninh',
    rating: { average: 4.8, count: 15000 },
    images: ['https://example.com/halong1.jpg'],
    source: 'places',
    isPartner: false
  },
  {
    id: '4',
    name: 'Sun World Ba Na Hills',
    category: 'c√¥ng vi√™n gi·∫£i tr√≠',
    address: 'An S∆°n, H√≤a Vang, ƒê√† N·∫µng',
    rating: { average: 4.4, count: 8500 },
    images: ['https://example.com/sunworld1.jpg'],
    source: 'places',
    isPartner: false
  },
  {
    id: '5',
    name: 'Ch·ª£ B·∫øn Th√†nh',
    category: 'ch·ª£',
    address: 'L√™ L·ª£i, Qu·∫≠n 1, TP.HCM',
    rating: { average: 4.2, count: 12000 },
    images: ['https://example.com/ben-thanh1.jpg'],
    source: 'places',
    isPartner: false
  },
  {
    id: '6',
    name: 'Spa Six Senses',
    category: 'spa',
    address: 'ƒê∆∞·ªùng Tr·∫ßn Ph√∫, Nha Trang',
    rating: { average: 4.7, count: 850 },
    images: ['https://example.com/spa1.jpg'],
    source: 'partners',
    isPartner: true
  },
  {
    id: '7',
    name: 'California Fitness & Yoga',
    category: 'gym',
    address: '45 Nguy·ªÖn Th·ªã Minh Khai, Qu·∫≠n 1, TP.HCM',
    rating: { average: 4.3, count: 1200 },
    images: ['https://example.com/gym1.jpg'],
    source: 'partners',
    isPartner: true
  },
  {
    id: '8',
    name: 'S√¢n bay T√¢n S∆°n Nh·∫•t',
    category: 's√¢n bay',
    address: 'T√¢n B√¨nh, TP.HCM',
    rating: { average: 4.0, count: 25000 },
    images: ['https://example.com/airport1.jpg'],
    source: 'places',
    isPartner: false
  }
];

// Available categories
const availableCategories = [
  // üè® L∆∞u tr√∫
  'kh√°ch s·∫°n', 'resort', 'homestay', 'hostel', 'villa', 'apartment',
  
  // üçΩÔ∏è ·∫®m th·ª±c
  'nh√† h√†ng', 'qu√°n ƒÉn', 'cafe', 'bar', 'pub', 'bistro', 'food court', 'street food',
  
  // üéØ ƒêi·ªÉm tham quan
  'ƒëi·ªÉm tham quan', 'di t√≠ch l·ªãch s·ª≠', 'b·∫£o t√†ng', 'ch√πa', 'nh√† th·ªù', 'c√¥ng vi√™n', 'v∆∞·ªùn th√∫',
  
  // üèñÔ∏è Du l·ªãch t·ª± nhi√™n
  'b√£i bi·ªÉn', 'n√∫i', 'th√°c n∆∞·ªõc', 'h·ªì', 's√¥ng', 'ƒë·∫£o', 'hang ƒë·ªông', 'r·ª´ng',
  
  // üé™ Gi·∫£i tr√≠
  'khu vui ch∆°i', 'c√¥ng vi√™n gi·∫£i tr√≠', 'casino', 'club', 'karaoke', 'cinema', 'theater',
  
  // üõçÔ∏è Mua s·∫Øm
  'trung t√¢m th∆∞∆°ng m·∫°i', 'ch·ª£', 'c·ª≠a h√†ng', 'si√™u th·ªã', 'outlet', 'night market',
  
  // üè• D·ªãch v·ª•
  'spa', 'massage', 'salon', 'gym', 'yoga', 'b·ªánh vi·ªán', 'ph√≤ng kh√°m', 'ng√¢n h√†ng',
  
  // üöó Giao th√¥ng
  's√¢n bay', 'b·∫øn xe', 'ga t√†u', 'b·∫øn c·∫£ng', 'tr·∫°m xƒÉng', 'b√£i ƒë·ªó xe',
  
  // üéì Gi√°o d·ª•c & VƒÉn h√≥a
  'tr∆∞·ªùng h·ªçc', 'th∆∞ vi·ªán', 'trung t√¢m vƒÉn h√≥a', 'ph√≤ng tri·ªÉn l√£m', 'studio',
  
  // üè¢ C√¥ng s·ªü
  'vƒÉn ph√≤ng', 'c√¥ng ty', 'nh√† m√°y', 'khu c√¥ng nghi·ªáp', 'co-working space',
  
  // üè† Kh√°c
  'other'
];

// GET /api/test-explore - Test explore v·ªõi c√°c danh m·ª•c m·ªõi
app.get('/api/test-explore', (req, res) => {
  const { category, source = 'all', limit = 10 } = req.query;
  
  let filteredPlaces = mockPlaces;
  
  // Filter by category
  if (category) {
    filteredPlaces = filteredPlaces.filter(place => 
      place.category === category
    );
  }
  
  // Filter by source
  if (source !== 'all') {
    filteredPlaces = filteredPlaces.filter(place => 
      place.source === source
    );
  }
  
  // Limit results
  const limitedPlaces = filteredPlaces.slice(0, parseInt(limit));
  
  res.json({
    success: true,
    message: 'Test explore v·ªõi danh m·ª•c ƒëa d·∫°ng',
    data: {
      items: limitedPlaces,
      total: filteredPlaces.length,
      filters: {
        category: category || null,
        source: source,
        limit: parseInt(limit)
      },
      availableCategories: availableCategories
    }
  });
});

// GET /api/test-categories - L·∫•y danh s√°ch t·∫•t c·∫£ danh m·ª•c
app.get('/api/test-categories', (req, res) => {
  const categoryGroups = {
    'üè® L∆∞u tr√∫': ['kh√°ch s·∫°n', 'resort', 'homestay', 'hostel', 'villa', 'apartment'],
    'üçΩÔ∏è ·∫®m th·ª±c': ['nh√† h√†ng', 'qu√°n ƒÉn', 'cafe', 'bar', 'pub', 'bistro', 'food court', 'street food'],
    'üéØ ƒêi·ªÉm tham quan': ['ƒëi·ªÉm tham quan', 'di t√≠ch l·ªãch s·ª≠', 'b·∫£o t√†ng', 'ch√πa', 'nh√† th·ªù', 'c√¥ng vi√™n', 'v∆∞·ªùn th√∫'],
    'üèñÔ∏è Du l·ªãch t·ª± nhi√™n': ['b√£i bi·ªÉn', 'n√∫i', 'th√°c n∆∞·ªõc', 'h·ªì', 's√¥ng', 'ƒë·∫£o', 'hang ƒë·ªông', 'r·ª´ng'],
    'üé™ Gi·∫£i tr√≠': ['khu vui ch∆°i', 'c√¥ng vi√™n gi·∫£i tr√≠', 'casino', 'club', 'karaoke', 'cinema', 'theater'],
    'üõçÔ∏è Mua s·∫Øm': ['trung t√¢m th∆∞∆°ng m·∫°i', 'ch·ª£', 'c·ª≠a h√†ng', 'si√™u th·ªã', 'outlet', 'night market'],
    'üè• D·ªãch v·ª•': ['spa', 'massage', 'salon', 'gym', 'yoga', 'b·ªánh vi·ªán', 'ph√≤ng kh√°m', 'ng√¢n h√†ng'],
    'üöó Giao th√¥ng': ['s√¢n bay', 'b·∫øn xe', 'ga t√†u', 'b·∫øn c·∫£ng', 'tr·∫°m xƒÉng', 'b√£i ƒë·ªó xe'],
    'üéì Gi√°o d·ª•c & VƒÉn h√≥a': ['tr∆∞·ªùng h·ªçc', 'th∆∞ vi·ªán', 'trung t√¢m vƒÉn h√≥a', 'ph√≤ng tri·ªÉn l√£m', 'studio'],
    'üè¢ C√¥ng s·ªü': ['vƒÉn ph√≤ng', 'c√¥ng ty', 'nh√† m√°y', 'khu c√¥ng nghi·ªáp', 'co-working space'],
    'üè† Kh√°c': ['other']
  };
  
  res.json({
    success: true,
    message: 'Danh s√°ch t·∫•t c·∫£ danh m·ª•c ƒë·ªãa ƒëi·ªÉm',
    data: {
      categoryGroups,
      totalCategories: availableCategories.length,
      totalGroups: Object.keys(categoryGroups).length
    }
  });
});

// GET /api/test-category/:category - Test m·ªôt danh m·ª•c c·ª• th·ªÉ
app.get('/api/test-category/:category', (req, res) => {
  const { category } = req.params;
  
  const placesInCategory = mockPlaces.filter(place => 
    place.category === category
  );
  
  if (placesInCategory.length === 0) {
    return res.status(404).json({
      success: false,
      message: `Kh√¥ng t√¨m th·∫•y ƒë·ªãa ƒëi·ªÉm n√†o trong danh m·ª•c "${category}"`,
      data: {
        category,
        suggestions: availableCategories.filter(cat => 
          cat.toLowerCase().includes(category.toLowerCase()) || 
          category.toLowerCase().includes(cat.toLowerCase())
        )
      }
    });
  }
  
  res.json({
    success: true,
    message: `ƒê·ªãa ƒëi·ªÉm trong danh m·ª•c "${category}"`,
    data: {
      category,
      items: placesInCategory,
      total: placesInCategory.length
    }
  });
});

const PORT = process.env.PORT || 3001;

app.listen(PORT, () => {
  console.log(`üöÄ Test server ƒëang ch·∫°y tr√™n port ${PORT}`);
  console.log('üìã C√°c endpoint c√≥ s·∫µn:');
  console.log(`   GET http://localhost:${PORT}/api/test-explore`);
  console.log(`   GET http://localhost:${PORT}/api/test-explore?category=b·∫£o t√†ng`);
  console.log(`   GET http://localhost:${PORT}/api/test-explore?category=spa&source=partners`);
  console.log(`   GET http://localhost:${PORT}/api/test-categories`);
  console.log(`   GET http://localhost:${PORT}/api/test-category/b·∫£o t√†ng`);
  console.log('');
  console.log('üí° Test c√°c danh m·ª•c m·ªõi:');
  console.log('   - b·∫£o t√†ng, ch√πa, b√£i bi·ªÉn, c√¥ng vi√™n gi·∫£i tr√≠');
  console.log('   - ch·ª£, spa, gym, s√¢n bay');
  console.log('   - v√† nhi·ªÅu danh m·ª•c kh√°c...');
});
