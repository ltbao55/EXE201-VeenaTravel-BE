import axios from 'axios';
import dotenv from 'dotenv';

dotenv.config();

/**
 * Test script ƒë·ªÉ ki·ªÉm tra OpenRouter API v·ªõi DeepSeek v3.1
 */
class OpenRouterTester {
    constructor() {
        // S·ª≠ d·ª•ng API key m·ªõi ƒë∆∞·ª£c cung c·∫•p
        this.apiKey = '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';
        this.baseURL = 'https://openrouter.ai/api/v1';
        this.model = 'deepseek/deepseek-chat'; // DeepSeek v3.1 model
    }

    /**
     * Test k·∫øt n·ªëi c∆° b·∫£n v·ªõi OpenRouter
     */
    async testConnection() {
        console.log('üîç Testing OpenRouter connection...');
        
        try {
            const response = await axios.post(
                `${this.baseURL}/chat/completions`,
                {
                    model: this.model,
                    messages: [
                        {
                            role: "system",
                            content: "You are a helpful assistant. Respond in Vietnamese."
                        },
                        {
                            role: "user",
                            content: "Xin ch√†o! B·∫°n c√≥ th·ªÉ gi·ªõi thi·ªáu v·ªÅ m√¨nh kh√¥ng?"
                        }
                    ],
                    temperature: 0.7,
                    max_tokens: 100
                },
                {
                    headers: {
                        'Authorization': `Bearer ${this.apiKey}`,
                        'Content-Type': 'application/json',
                        'HTTP-Referer': 'http://localhost:5001',
                        'X-Title': 'Veena Travel Backend'
                    }
                }
            );

            console.log('‚úÖ Connection successful!');
            console.log('üìä Response data:', {
                model: response.data.model,
                usage: response.data.usage,
                response: response.data.choices[0].message.content
            });
            
            return true;
        } catch (error) {
            console.error('‚ùå Connection failed:', error.response?.data || error.message);
            return false;
        }
    }

    /**
     * Test t√≠nh nƒÉng tr√≠ch xu·∫•t √Ω ƒë·ªãnh du l·ªãch
     */
    async testIntentExtraction() {
        console.log('\nüß† Testing intent extraction...');
        
        const testQuery = "T√¥i mu·ªën ƒëi du l·ªãch ƒê√† L·∫°t 3 ng√†y v·ªõi gia ƒë√¨nh, t√¨m nh·ªØng ƒë·ªãa ƒëi·ªÉm ƒÉn u·ªëng v√† tham quan thi√™n nhi√™n";
        
        try {
            const prompt = this.buildIntentExtractionPrompt(testQuery);
            
            const response = await axios.post(
                `${this.baseURL}/chat/completions`,
                {
                    model: this.model,
                    messages: [
                        {
                            role: "system",
                            content: "B·∫°n l√† m·ªôt AI chuy√™n ph√¢n t√≠ch √Ω ƒë·ªãnh du l·ªãch. H√£y tr·∫£ v·ªÅ CH√çNH X√ÅC m·ªôt object JSON h·ª£p l·ªá, kh√¥ng c√≥ text th√™m."
                        },
                        {
                            role: "user",
                            content: prompt
                        }
                    ],
                    temperature: 0.3,
                    max_tokens: 500
                },
                {
                    headers: {
                        'Authorization': `Bearer ${this.apiKey}`,
                        'Content-Type': 'application/json',
                        'HTTP-Referer': 'http://localhost:5001',
                        'X-Title': 'Veena Travel Backend'
                    }
                }
            );

            const aiResponse = response.data.choices[0].message.content.trim();
            console.log('üìù Raw AI Response:', aiResponse);
            
            // Parse JSON response
            const intentData = this.parseJSONResponse(aiResponse);
            console.log('‚úÖ Parsed Intent Data:', JSON.stringify(intentData, null, 2));
            
            return intentData;
        } catch (error) {
            console.error('‚ùå Intent extraction failed:', error.response?.data || error.message);
            return null;
        }
    }

    /**
     * Test so s√°nh performance v·ªõi model c≈©
     */
    async testPerformanceComparison() {
        console.log('\n‚ö° Testing performance comparison...');
        
        const testCases = [
            "T√¨m qu√°n ƒÉn ngon ·ªü H√† N·ªôi",
            "Du l·ªãch Ph√∫ Qu·ªëc 5 ng√†y v·ªõi b·∫°n b√®",
            "Kh√°ch s·∫°n cao c·∫•p ·ªü Sapa cho c·∫∑p ƒë√¥i"
        ];

        for (const testCase of testCases) {
            console.log(`\nüîç Testing: "${testCase}"`);
            
            const startTime = Date.now();
            
            try {
                const response = await axios.post(
                    `${this.baseURL}/chat/completions`,
                    {
                        model: this.model,
                        messages: [
                            {
                                role: "user",
                                content: `Ph√¢n t√≠ch √Ω ƒë·ªãnh du l·ªãch: ${testCase}`
                            }
                        ],
                        temperature: 0.3,
                        max_tokens: 200
                    },
                    {
                        headers: {
                            'Authorization': `Bearer ${this.apiKey}`,
                            'Content-Type': 'application/json'
                        }
                    }
                );

                const endTime = Date.now();
                const latency = endTime - startTime;
                
                console.log(`‚úÖ Latency: ${latency}ms`);
                console.log(`üìä Tokens used: ${response.data.usage?.total_tokens || 'N/A'}`);
                
            } catch (error) {
                console.error(`‚ùå Failed: ${error.message}`);
            }
        }
    }

    /**
     * Build prompt for intent extraction (same as OpenRouterService)
     */
    buildIntentExtractionPrompt(userQuery) {
        return `
Ph√¢n t√≠ch c√¢u n√≥i sau c·ªßa ng∆∞·ªùi d√πng v·ªÅ du l·ªãch v√† tr√≠ch xu·∫•t th√¥ng tin th√†nh JSON:

"${userQuery}"

H√£y tr·∫£ v·ªÅ CH√çNH X√ÅC m·ªôt object JSON v·ªõi c·∫•u tr√∫c sau (kh√¥ng c√≥ markdown, kh√¥ng c√≥ text th√™m):

{
    "destination": "t√™n ƒë·ªãa ƒëi·ªÉm/th√†nh ph·ªë",
    "duration": s·ªë ng√†y (s·ªë nguy√™n),
    "pax": s·ªë ng∆∞·ªùi (s·ªë nguy√™n),
    "budget": "low/medium/high ho·∫∑c null",
    "interests": ["tag1", "tag2", "tag3"],
    "accommodation": "hotel/homestay/resort ho·∫∑c null",
    "transportation": "car/motorbike/walking ho·∫∑c null",
    "travelStyle": "family/couple/solo/friends",
    "categories": ["food", "nature", "culture", "entertainment", "shopping"]
}

Quy t·∫Øc:
- destination: T√™n ƒë·ªãa ƒëi·ªÉm ch√≠nh ƒë∆∞·ª£c ƒë·ªÅ c·∫≠p
- duration: S·ªë ng√†y du l·ªãch (m·∫∑c ƒë·ªãnh 1 n·∫øu kh√¥ng r√µ)
- pax: S·ªë ng∆∞·ªùi (m·∫∑c ƒë·ªãnh 2 n·∫øu kh√¥ng r√µ)
- budget: ∆Ø·ªõc t√≠nh t·ª´ ng·ªØ c·∫£nh ho·∫∑c null
- interests: M·∫£ng c√°c s·ªü th√≠ch/ho·∫°t ƒë·ªông ƒë∆∞·ª£c ƒë·ªÅ c·∫≠p
- accommodation: Lo·∫°i ch·ªó ·ªü ho·∫∑c null
- transportation: Ph∆∞∆°ng ti·ªán di chuy·ªÉn ho·∫∑c null
- travelStyle: Phong c√°ch du l·ªãch d·ª±a tr√™n ng·ªØ c·∫£nh
- categories: M·∫£ng c√°c danh m·ª•c ph√π h·ª£p v·ªõi s·ªü th√≠ch
`;
    }

    /**
     * Parse JSON response (same as OpenRouterService)
     */
    parseJSONResponse(aiResponse) {
        try {
            // Remove markdown code blocks if any
            let cleanResponse = aiResponse.replace(/```json\s*|\s*```/g, '').trim();
            
            // Remove extra text before and after JSON
            const jsonStart = cleanResponse.indexOf('{');
            const jsonEnd = cleanResponse.lastIndexOf('}') + 1;
            
            if (jsonStart !== -1 && jsonEnd !== -1) {
                cleanResponse = cleanResponse.substring(jsonStart, jsonEnd);
            }
            
            return JSON.parse(cleanResponse);
            
        } catch (parseError) {
            console.error('JSON Parse Error:', parseError.message);
            console.error('AI Response:', aiResponse);
            
            // Fallback: return default object
            return {
                destination: "Vi·ªát Nam",
                duration: 1,
                pax: 2,
                budget: null,
                interests: ["du l·ªãch"],
                accommodation: null,
                transportation: null,
                travelStyle: "couple",
                categories: ["nature"]
            };
        }
    }

    /**
     * Run all tests
     */
    async runAllTests() {
        console.log('üöÄ Starting OpenRouter + DeepSeek v3.1 Tests\n');
        
        // Test 1: Basic connection
        const connectionSuccess = await this.testConnection();
        if (!connectionSuccess) {
            console.log('‚ùå Stopping tests due to connection failure');
            return;
        }

        // Test 2: Intent extraction
        await this.testIntentExtraction();

        // Test 3: Performance comparison
        await this.testPerformanceComparison();

        console.log('\nüéâ All tests completed!');
    }
}

// Run tests
const tester = new OpenRouterTester();
tester.runAllTests().catch(console.error);
